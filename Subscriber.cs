using System;
using System.Collections.Generic;

namespace EventMessagingSystem
{
    /// <summary>
    /// Subscriber sÄ±nÄ±fÄ± - Observer Pattern'in Observer rolÃ¼
    /// Publisher'larÄ± dinler ve sadece ilgilendiÄŸi mesajlarÄ± alÄ±r
    /// Publisher/Subscriber Pattern ile filtreleme yapar
    /// </summary>
    public class Subscriber
    {
        // Private fields: Subscriber'Ä±n internal state'i
        private string _subscriberName;                      // Subscriber'Ä±n adÄ±
        private List<Message> _receivedMessages;             // AlÄ±nan mesajlarÄ±n koleksiyonu
        private List<string> _interestedMessageTypes;        // Ä°lgi filtreleri

        /// <summary>
        /// Constructor: Subscriber nesnesi oluÅŸtururken Ã§aÄŸrÄ±lÄ±r
        /// TÃ¼m koleksiyonlar boÅŸ olarak baÅŸlatÄ±lÄ±r
        /// </summary>
        public Subscriber(string name)
        {
            _subscriberName = name;
            _receivedMessages = new List<Message>();       // BoÅŸ mesaj listesi
            _interestedMessageTypes = new List<string>();  // BoÅŸ filtre listesi
        }

        /// <summary>
        /// Ä°lgi alanÄ± ekleme - Message filtering iÃ§in
        /// Duplicate check yapÄ±lÄ±r (aynÄ± tÃ¼rÃ¼ iki kez eklemeyi Ã¶nler)
        /// </summary>
        public void AddInterest(string messageType)
        {
            // Duplicate control: AynÄ± tÃ¼rÃ¼ tekrar ekleme
            if (!_interestedMessageTypes.Contains(messageType))
            {
                _interestedMessageTypes.Add(messageType);
                Console.WriteLine($"{_subscriberName} artÄ±k '{messageType}' mesajlarÄ±nÄ± dinliyor");
            }
        }

        /// <summary>
        /// Publisher'a abone olma - Observer Pattern registration
        /// Event delegation: Publisher'Ä±n event'ine kendi handler'Ä±nÄ± baÄŸlar
        /// += operator ile multi-cast delegate oluÅŸur
        /// </summary>
        public void SubscribeTo(Publisher publisher)
        {
            // âš¡ KRITIK: Event'e method baÄŸlama (Observer registration)
            // += multicast delegate oluÅŸturur
            // Publisher mesaj gÃ¶nderdiÄŸinde OnMessageReceived otomatik Ã§aÄŸrÄ±lÄ±r
            publisher.MessagePublished += OnMessageReceived;
            
            Console.WriteLine($"{_subscriberName}, {publisher.GetType().Name}'a abone oldu");
        }

        /// <summary>
        /// Abonelikten Ã§Ä±kma - Observer Pattern deregistration
        /// -= operator ile event'ten method'u Ã§Ä±karÄ±r
        /// </summary>
        public void UnsubscribeFrom(Publisher publisher)
        {
            // Event'ten method Ã§Ä±karma (Observer deregistration)
            publisher.MessagePublished -= OnMessageReceived;
            Console.WriteLine($"{_subscriberName} abonelikten Ã§Ä±ktÄ±");
        }

        /// <summary>
        /// Event Handler - Observer Pattern'in reaction method'u
        /// Publisher event tetiklediÄŸinde otomatik Ã§aÄŸrÄ±lÄ±r
        /// Content-based filtering yapar
        /// </summary>
        private void OnMessageReceived(Message message)
        {
            // Filtreleme logic: Publisher/Subscriber Pattern'in core'u
            // 1. HiÃ§ filtre yoksa tÃ¼m mesajlarÄ± al VEYA
            // 2. Bu mesaj tÃ¼rÃ¼ ilgi listesinde var mÄ± kontrol et
            if (_interestedMessageTypes.Count == 0 || 
                _interestedMessageTypes.Contains(message.MessageType))
            {
                // MesajÄ± kabul et ve koleksiyona ekle
                _receivedMessages.Add(message);
                Console.WriteLine($"ğŸ“© {_subscriberName} mesaj aldÄ±: {message}");
            }
            // Ä°lgilenmiyorsa silent ignore (mesaj gÃ¶rmezden gelinir)
        }

        /// <summary>
        /// AlÄ±nan mesajlarÄ± gÃ¶rÃ¼ntÃ¼leme - UI/Reporting method
        /// Empty collection check yapÄ±lÄ±r
        /// </summary>
        public void ShowReceivedMessages()
        {
            Console.WriteLine($"\n=== {_subscriberName} AlÄ±nan Mesajlar ===");
            
            // Empty collection check
            if (_receivedMessages.Count == 0)
            {
                Console.WriteLine("HenÃ¼z mesaj alÄ±nmadÄ±.");
                return; // Early return pattern
            }

            // Collection iteration ile mesajlarÄ± listele
            foreach (var message in _receivedMessages)
            {
                Console.WriteLine($"  {message}"); // 2 space indentation
            }
        }

        /// <summary>
        /// Ä°lgi alanlarÄ±nÄ± gÃ¶rÃ¼ntÃ¼leme - Debug/Info amaÃ§lÄ±
        /// string.Join ile array'i formatted string'e Ã§evirir
        /// </summary>
        public void ShowInterests()
        {
            // Array to string conversion
            Console.WriteLine($"{_subscriberName} ilgilenilen tÃ¼rler: {string.Join(", ", _interestedMessageTypes)}");
        }
    }
}